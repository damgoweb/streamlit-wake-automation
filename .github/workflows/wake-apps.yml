# .github/workflows/wake-apps.yml
name: Wake Streamlit Apps

on:
  schedule:
    - cron: '0 */4 * * *'  # 4時間ごと
  
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'デバッグモードで実行'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
  
  push:
    branches:
      - main
    paths:
      - 'scripts/**'
      - '.github/workflows/**'

env:
  TZ: 'Asia/Tokyo'
  PYTHON_VERSION: '3.9'

jobs:
  wake-streamlit-apps:
    name: Wake up Streamlit applications
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    # 重要: 権限を明示的に設定
    permissions:
      contents: write  # リポジトリへの書き込み権限
      actions: read    # Actionsの読み取り権限
    
    steps:
      # リポジトリのチェックアウト（重要: tokenを指定）
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # GITHUB_TOKENを明示的に指定
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true  # 認証情報を保持
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 🌐 Setup Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable
      
      - name: 🚗 Setup ChromeDriver
        uses: nanasess/setup-chromedriver@v2
      
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt
          
          echo "Chrome version:"
          google-chrome --version
          echo "ChromeDriver version:"
          chromedriver --version
      
      - name: 🔍 Debug information
        if: ${{ github.event.inputs.debug_mode == 'true' }}
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in scripts/:"
          ls -la scripts/
          echo "Python version:"
          python --version
          echo "Installed packages:"
          pip list
          echo "Git remote:"
          git remote -v
          echo "Git config:"
          git config --list
      
      - name: 🚀 Wake up Streamlit apps
        id: wake_apps
        run: |
          python scripts/wake_apps.py
          echo "exit_code=$?" >> $GITHUB_OUTPUT
        continue-on-error: true
      
      - name: 📊 Check execution results
        if: always()
        run: |
          if [ -f logs/streamlit_access.log ]; then
            echo "📋 Latest log entries:"
            tail -n 20 logs/streamlit_access.log
          else
            echo "⚠️ Log file not found"
          fi
          
          if [ "${{ steps.wake_apps.outputs.exit_code }}" = "0" ]; then
            echo "✅ Script executed successfully"
          else
            echo "⚠️ Script exited with code: ${{ steps.wake_apps.outputs.exit_code }}"
          fi
      
      - name: 💾 Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wake-logs-${{ github.run_number }}
          path: logs/
          retention-days: 30
      
      # 修正版: ログファイルのコミット
      - name: 📝 Commit and push log files
        if: ${{ github.event_name != 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Git設定（botアカウントを使用）
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # 認証情報を設定
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          
          # 最新の変更を取得
          git pull origin main || true
          
          # ログファイルが存在するか確認
          if [ -f logs/streamlit_access.log ]; then
            git add logs/
            
            # 変更があるか確認
            if git diff --staged --quiet; then
              echo "📝 No changes to commit"
            else
              # コミット
              git commit -m "📝 Update access logs [skip ci]
              
              Run: #${{ github.run_number }}
              Time: $(date '+%Y-%m-%d %H:%M:%S %Z')" || true
              
              # プッシュ（リトライ付き）
              for i in 1 2 3; do
                if git push origin main; then
                  echo "✅ Successfully pushed to repository"
                  break
                else
                  echo "⚠️ Push failed, attempt $i/3"
                  if [ $i -lt 3 ]; then
                    sleep 5
                  fi
                fi
              done
            fi
          else
            echo "⚠️ No log file to commit"
          fi
      
      # Slack通知（オプション - 設定されている場合のみ）
      - name: 📢 Notify results to Slack (Optional)
        if: ${{ failure() && github.event_name == 'schedule' && env.SLACK_WEBHOOK_URL != '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"⚠️ Streamlitアプリの起動処理で問題が発生しました"}' \
              $SLACK_WEBHOOK_URL
          else
            echo "Slack webhook not configured, skipping notification"
          fi
        continue-on-error: true
      
      # ジョブサマリー
      - name: 📈 Job Summary
        if: always()
        run: |
          echo "## 実行結果サマリー" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 実行時刻: $(date '+%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_STEP_SUMMARY
          echo "- ワークフロー: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- 実行番号: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- トリガー: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- ステータス: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f logs/streamlit_access.log ]; then
            echo "### 最新のアクセスログ" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -n 10 logs/streamlit_access.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "✅ ワークフローは正常に実行されました" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ ログファイルが生成されませんでした" >> $GITHUB_STEP_SUMMARY
          fi